import logging
import requests
import json
import re
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤
QUESTIONNAIRE_BOT_TOKEN = "8159114689:AAF4hvVIoM0suy96MA97ywamFVkA5tsgGrg"  # –ë–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç
RECEIVER_BOT_TOKEN = "8123260024:AAH_j10hELrWoUNwy1o4eaauQL7-wIhw8i4"   # –ë–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç
YOUR_CHAT_ID = "7580196939"  # –í–ê–®–ò ID

QUESTIONNAIRE_API_URL = f"https://api.telegram.org/bot{QUESTIONNAIRE_BOT_TOKEN}"
RECEIVER_API_URL = f"https://api.telegram.org/bot{RECEIVER_BOT_TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_profiles = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class States:
    START = "start"
    NAME = "name"
    AGE = "age"
    TELEGRAM = "telegram"
    WORK_CHOICE = "work_choice"
    WORK_DETAILS = "work_details"
    STUDY_PLACE = "study_place"
    STUDY_SPECIALITY = "study_speciality"
    HOBBIES = "hobbies"
    JOB_SEARCH = "job_search"
    OTHER_ACTIVITY = "other_activity"
    CITY = "city"
    INTERESTS = "interests"
    PHONE = "phone"
    EMAIL = "email"

def send_message_questionnaire(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç-–∞–Ω–∫–µ—Ç—É"""
    url = f"{QUESTIONNAIRE_API_URL}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, data=data)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–Ω–∫–µ—Ç—É-–±–æ—Ç: {e}")
        return None

def send_message_receiver(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å"""
    url = f"{RECEIVER_API_URL}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    try:
        response = requests.post(url, data=data)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–∞—Ç–µ–ª—å-–±–æ—Ç: {e}")
        return None

def send_to_receiver_bot(profile, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É –Ω–∞ –±–æ—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å"""
    message = f"üÜï <b>–ù–û–í–ê–Ø –ê–ù–ö–ï–¢–ê</b>\n"
    message += "=" * 25 + "\n\n"
    message += f"üë§ <b>–ò–º—è:</b> {profile.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –ª–µ—Ç\n"
    message += f"üì± <b>Telegram:</b> {profile.get('telegram', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"üíº <b>–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {profile.get('work_hobby', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if profile.get('city'):
        message += f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {profile['city']}\n"
    
    if profile.get('interests'):
        message += f"‚≠ê <b>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</b> {profile['interests']}\n"
    
    if profile.get('phone'):
        message += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {profile['phone']}\n"
    
    if profile.get('email'):
        message += f"üìß <b>Email:</b> {profile['email']}\n"
    
    message += f"\nüë§ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n"
    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –±–æ—Ç –Ω–∞ –≤–∞—à ID
    send_message_receiver(YOUR_CHAT_ID, message)

def handle_start(chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_states[user_id] = States.NAME
    user_profiles[user_id] = {}
    
    welcome_text = """üåü <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ê–ù–ö–ï–¢–£!</b> üåü

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.
–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üëá

<b>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</b>
(–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)"""
    
    send_message_questionnaire(chat_id, welcome_text)

def handle_message(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_state = user_states.get(user_id, States.START)
    
    if current_state == States.NAME:
        handle_name(chat_id, user_id, text)
    elif current_state == States.AGE:
        handle_age(chat_id, user_id, text)
    elif current_state == States.TELEGRAM:
        handle_telegram(chat_id, user_id, text)
    elif current_state == States.WORK_CHOICE:
        handle_work_choice(chat_id, user_id, text)
    elif current_state == States.WORK_DETAILS:
        handle_work_details(chat_id, user_id, text)
    elif current_state == States.STUDY_PLACE:
        handle_study_place(chat_id, user_id, text)
    elif current_state == States.STUDY_SPECIALITY:
        handle_study_speciality(chat_id, user_id, text)
    elif current_state == States.HOBBIES:
        handle_hobbies(chat_id, user_id, text)
    elif current_state == States.JOB_SEARCH:
        handle_job_search(chat_id, user_id, text)
    elif current_state == States.OTHER_ACTIVITY:
        handle_other_activity(chat_id, user_id, text)
    elif current_state == States.CITY:
        handle_city(chat_id, user_id, text)
    elif current_state == States.INTERESTS:
        handle_interests(chat_id, user_id, text)
    elif current_state == States.PHONE:
        handle_phone(chat_id, user_id, text)
    elif current_state == States.EMAIL:
        handle_email(chat_id, user_id, text)

def handle_name(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    if len(text.strip()) >= 2:
        user_profiles[user_id]['name'] = text.strip().title()
        user_states[user_id] = States.AGE
        send_message_questionnaire(chat_id, f"–û—Ç–ª–∏—á–Ω–æ, {text.strip()}! üëç\n\n<b>–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</b>\n(–æ—Ç 1 –¥–æ 120)")
    else:
        send_message_questionnaire(chat_id, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

def handle_age(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(text.strip())
        if 1 <= age <= 120:
            user_profiles[user_id]['age'] = age
            user_states[user_id] = States.TELEGRAM
            send_message_questionnaire(chat_id, f"–ü–æ–Ω—è–ª, —Ç–µ–±–µ {age} –ª–µ—Ç! üéÇ\n\n<b>–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ Telegram?</b>\n(–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ—Ç')")
        else:
            send_message_questionnaire(chat_id, "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 120 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        send_message_questionnaire(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç):")

def handle_telegram(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –Ω–∏–∫–∞"""
    text = text.strip()
    if text.lower() in ['–Ω–µ—Ç', '–Ω–µ —Ö–æ—á—É', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '']:
        user_profiles[user_id]['telegram'] = "–ù–µ —É–∫–∞–∑–∞–Ω"
    else:
        if text.startswith('@'):
            text = text[1:]
        user_profiles[user_id]['telegram'] = f"@{text}" if text else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    user_states[user_id] = States.WORK_CHOICE
    
    keyboard = {
        'keyboard': [
            ['1Ô∏è‚É£ –†–∞–±–æ—Ç–∞—é', '2Ô∏è‚É£ –£—á—É—Å—å'],
            ['3Ô∏è‚É£ –ï—Å—Ç—å —Ö–æ–±–±–∏', '4Ô∏è‚É£ –í –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã'],
            ['5Ô∏è‚É£ –î—Ä—É–≥–æ–µ']
        ],
        'resize_keyboard': True,
        'one_time_keyboard': True
    }
    
    send_message_questionnaire(chat_id, 
        "–û—Ç–ª–∏—á–Ω–æ! üì±\n\n<b>–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Üì", 
        keyboard)

def handle_work_choice(chat_id, user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    choice = text.strip().lower()
    
    if choice in ['1', '1Ô∏è‚É£ —Ä–∞–±–æ—Ç–∞—é', '—Ä–∞–±–æ—Ç–∞—é']:
        user_states[user_id] = States.WORK_DETAILS
        send_message_questionnaire(chat_id, "üíº <b>–ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?</b>\n(–Ω–∞–ø–∏—à–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–∞–Ω–∏—é)")
    elif choice in ['2', '2Ô∏è‚É£ —É—á—É—Å—å', '—É—á—É—Å—å']:
        user_states[user_id] = States.STUDY_PLACE
        send_message_questionnaire(chat_id, "üéì <b>–ì–¥–µ —Ç—ã —É—á–∏—à—å—Å—è?</b>\n(—à–∫–æ–ª–∞, —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –∫—É—Ä—Å—ã)")
    elif choice in ['3', '3Ô∏è‚É£ –µ—Å—Ç—å —Ö–æ–±–±–∏', '–µ—Å—Ç—å —Ö–æ–±–±–∏']:
        user_states[user_id] = States.HOBBIES
        send_message_questionnaire(chat_id, "üé® <b>–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?</b>\n(—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ)")
    elif choice in ['4', '4Ô∏è‚É£ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã', '–≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã']:
        user_states[user_id] = States.JOB_SEARCH
        send_message_questionnaire(chat_id, "üîç <b>–ö–∞–∫—É—é —Ä–∞–±–æ—Ç—É –∏—â–µ—à—å?</b>\n(–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–ª—é–±—É—é')")
    elif choice in ['5', '5Ô∏è‚É£ –¥—Ä—É–≥–æ–µ', '–¥—Ä—É–≥–æ–µ']:
        user_states[user_id] = States.OTHER_ACTIVITY
        send_message_questionnaire(chat_id, "‚úçÔ∏è <b>–û–ø–∏—à–∏ —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>")
    else:
        send_message_questionnaire(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1-5):")

def handle_work_details(chat_id, user_id, text):
    user_profiles[user_id]['work_hobby'] = f"–†–∞–±–æ—Ç–∞: {text.strip()}"
    ask_city(chat_id, user_id)

def handle_study_place(chat_id, user_id, text):
    user_profiles[user_id]['study_place'] = text.strip()
    user_states[user_id] = States.STUDY_SPECIALITY
    send_message_questionnaire(chat_id, "üìö <b>–ö–∞–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å?</b>\n(–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è')")

def handle_study_speciality(chat_id, user_id, text):
    study_info = f"–£—á—ë–±–∞: {user_profiles[user_id]['study_place']}"
    if text.strip().lower() not in ['–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è', '–Ω–µ—Ç']:
        study_info += f", —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {text.strip()}"
    user_profiles[user_id]['work_hobby'] = study_info
    ask_city(chat_id, user_id)

def handle_hobbies(chat_id, user_id, text):
    user_profiles[user_id]['work_hobby'] = f"–•–æ–±–±–∏: {text.strip()}"
    ask_city(chat_id, user_id)

def handle_job_search(chat_id, user_id, text):
    work_info = "–í –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã"
    if text.strip().lower() not in ['–ª—é–±—É—é', '–Ω–µ –∑–Ω–∞—é']:
        work_info += f", –∏—â—É: {text.strip()}"
    user_profiles[user_id]['work_hobby'] = work_info
    ask_city(chat_id, user_id)

def handle_other_activity(chat_id, user_id, text):
    user_profiles[user_id]['work_hobby'] = text.strip()
    ask_city(chat_id, user_id)

def ask_city(chat_id, user_id):
    user_states[user_id] = States.CITY
    send_message_questionnaire(chat_id, "üèôÔ∏è <b>–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∂–∏–≤–µ—à—å?</b>\n(–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ —Ö–æ—á—É —É–∫–∞–∑—ã–≤–∞—Ç—å')")

def handle_city(chat_id, user_id, text):
    if text.strip().lower() not in ['–Ω–µ —Ö–æ—á—É —É–∫–∞–∑—ã–≤–∞—Ç—å', '–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        user_profiles[user_id]['city'] = text.strip().title()
    
    user_states[user_id] = States.INTERESTS
    send_message_questionnaire(chat_id, "‚≠ê <b>–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—ã?</b>\n(–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ—Ç')")

def handle_interests(chat_id, user_id, text):
    if text.strip().lower() not in ['–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        user_profiles[user_id]['interests'] = text.strip()
    
    user_states[user_id] = States.PHONE
    send_message_questionnaire(chat_id, "üìû <b>–¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?</b>\n(–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ—Ç')")

def handle_phone(chat_id, user_id, text):
    if text.strip().lower() not in ['–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        user_profiles[user_id]['phone'] = text.strip()
    
    user_states[user_id] = States.EMAIL
    send_message_questionnaire(chat_id, "üìß <b>–¢–≤–æ–π email?</b>\n(–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ—Ç')")

def handle_email(chat_id, user_id, text):
    if text.strip().lower() not in ['–Ω–µ—Ç', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        user_profiles[user_id]['email'] = text.strip()
    
    finish_survey(chat_id, user_id)

def finish_survey(chat_id, user_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    profile = user_profiles[user_id]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    result_text = "üéâ <b>–ê–ù–ö–ï–¢–ê –ó–ê–ü–û–õ–ù–ï–ù–ê!</b>\n\n"
    result_text += "üìã <b>–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
    result_text += f"üë§ –ò–º—è: {profile.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    result_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –ª–µ—Ç\n"
    result_text += f"üíº –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {profile.get('work_hobby', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    result_text += "\nüì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...</b>"
    
    send_message_questionnaire(chat_id, result_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –±–æ—Ç –∫ –≤–∞–º
    send_to_receiver_bot(profile, user_id)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    send_message_questionnaire(chat_id, "‚úÖ <b>–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n–°–ø–∞—Å–∏–±–æ! üôè\n\n–î–ª—è –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã: /start")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if user_id in user_states:
        del user_states[user_id]
    if user_id in user_profiles:
        del user_profiles[user_id]

def get_updates(bot_token, offset=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    url = f"https://api.telegram.org/bot{bot_token}/getUpdates"
    params = {'timeout': 30}
    if offset:
        params['offset'] = offset
    
    try:
        response = requests.get(url, params=params)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ï–¥–∏–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìù –ê–Ω–∫–µ—Ç—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—ã–π –±–æ—Ç -> –≤—Ç–æ—Ä–æ–π –±–æ—Ç -> –≤–∞–º")
    
    offset = None
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞-–∞–Ω–∫–µ—Ç—ã
            updates = get_updates(QUESTIONNAIRE_BOT_TOKEN, offset)
            
            if updates and updates.get('ok'):
                for update in updates.get('result', []):
                    offset = update['update_id'] + 1
                    
                    if 'message' in update:
                        message = update['message']
                        chat_id = message['chat']['id']
                        user_id = message['from']['id']
                        
                        if 'text' in message:
                            text = message['text']
                            
                            if text == '/start':
                                handle_start(chat_id, user_id)
                            else:
                                handle_message(chat_id, user_id, text)
            
            time.sleep(1)
            
        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(5)

if __name__ == "__main__":
    main()
